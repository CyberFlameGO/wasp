/*--------------------------------------------------------
Modified from JSON5 grammar at: 
https://github.com/json5/json5-spec/blob/master/json5.abnf
--------------------------------------------------------*/

eol ::= LF | CRLF | CR          /* End-of-line */

eof ::= EOF           			/* End-of-input */

/*--------------------------------------------------------*/

comment ::= sl_comment | ml_comment

sl_comment ::= begin_sl_comment (pchar | ows)* (eol | eof)

ml_comment ::= begin_ml_comment (pchar_non_star | ('*' pchar_non_slash) | ows | eol)* end_ml_comment

begin_sl_comment ::= '//'

begin_ml_comment ::= '/*'

end_ml_comment   ::= '*/'

pchar ::= [#x20-#x7E] | [#x80-#x10FFFF] /* Printable character */

pchar_non_star ::= [#x20-#x29] | [#x2B-#x7E] | [#x80-#x10FFFF] /* Printable character except * */

pchar_non_slash ::= [#x20-#x2E] | [#x30-#x7E] | [#x80-#x10FFFF] /* Printable character except / */

/*--------------------------------------------------------*/

ws ::= (SP |                /* Space */
        ows |               /* Other space-like characters */
        eol |               /* Line ending */
		comment)*           /* Comment */

ows ::= HTAB |              /* Horizontal tab */
      [#xA0] |              /* NBSP */
      [#xFEFF]              /* BOM */

/*--------------------------------------------------------*/

null  ::= 'null'

boolean  ::= 'true' | 'false'

/*--------------------------------------------------------*/

number ::= ('+' | '-')? (nan | inf | dec)

nan ::= 'NaN'

inf ::= 'Infinity'

dec ::= (int ('.' digit*)? | ('.' digit+)) (exp)?   

exp ::= ('e' | 'E') ('+' | '-')? digit+

int ::= '0' | ([1-9] digit*)

digit ::= [0-9]

/*--------------------------------------------------------*/

string ::= s_string | d_string | t_string

d_string ::= '"' (char | "'")* '"'

s_string ::= "'" (char | '"')* "'"

/* tripple quoted string */
t_string ::= ("'''" tripple_quoted_text "'''") | ('"""' tripple_quoted_text '"""')

char ::= unescaped |
       escape (
           [#x30] |             /* 0    nul             U+0000 */
           [#x62] |             /* b    backspace       U+0008 */
           [#x66] |             /* f    form feed       U+000C */
           [#x6E] |             /* n    line feed       U+000A */
           [#x72] |             /* r    carriage return U+000D */
           [#x74] |             /* t    tab             U+0009 */
           [#x76] |             /* v    vtab            U+000B */
           hex_char |     		/* xXX                  U+00XX */
           unicode_char |     	/* uXXXX                U+XXXX */
           eol |              	/* end-of-line -> empty string */
           other_escape )     	/* the character itself */
		
hex_char ::= 'x' hexdig hexdig

unicode_char ::= 'u' hexdig hexdig hexdig hexdig

hexdig ::= [0-9a-fA-F]

escape ::= '\'                 /* \ backslash */

unescaped ::= [#x20-#x21] | [#x23-#x26] | [#x28-#x5B] | [#x5D-#x7E] | [#x80-#x10FFFF]

other_escaped ::= [#x20-#x2F] | [#x3A-#x61] | [#x63-#x65] | [#x67-#x6D] | [#x6F-#x71] | [#x73] | [#x77] | [#x79-#x7E] | [#x80-#x10FFFF]

/*--------------------------------------------------------*/

array ::= begin_array (value (value_separator value)* value_sep_opt)? end_array

begin_array     ::= ws '[' ws

end_array       ::= ws ']' ws

value_separator ::= ws ',' ws

value_sep_opt   ::= (value_separator)?

/*--------------------------------------------------------*/

json_object ::= begin_object properties end_object

begin_object ::= ws '{' ws

end_object ::= ws '}' ws

properties ::= (property (value_separator property)* value_sep_opt)?

property ::= key separator value

separator ::= ws ':' ws

key ::= string | identifier

identifier ::= begin_identifier continue_identifier*

begin_identifier ::= [a-zA-Z] | '_' | '$'

continue_identifier ::= begin_identifier | digit | '-' | '.'

/*--------------------------------------------------------*/

/* Note: Mark property key cannot be numeric - this constraint cannot be directly expressed in BNF notation */ 
mark_object ::= begin_object type_name properties contents end_object

type_name ::= identifier ws

contents ::= (text | json_object | mark_object | mark_pragma | ws)*

text ::= (string ws)+   /* Mark text can be multiple consecutive strings */

mark_pragma ::= '{' (pchar_no_brace | '\{' | '\}')* '}'

pchar_no_brace ::= [#x20-#x7A] | '|' | [#x7E-#x10FFFF] /* Printable character except {, } */

/*--------------------------------------------------------*/

value ::= null | boolean | number | string | array | json_object | mark_object | mark_pragma

Mark ::= ws value ws
